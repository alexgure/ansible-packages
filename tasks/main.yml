---

- name: load OS specific variables (see ../vars/*)
  include_vars: "{{ansible_os_family}}.yml"
  when: ansible_distribution != "CentOS"

- name: load Centos specific variables (see ../vars/*)
  include_vars: "{{ansible_distribution}}.yml"
  when: ansible_distribution == "CentOS"

- include: RedHat.yml
  when: ansible_os_family == "RedHat"

- include: openwrt.yml
  when: ansible_distribution == "OpenWrt"

  # this task would attempt to install all available packages on ubuntu,
  # therefore to upgrade all installed packages, the apt module should be used
  # with upgrade=safe option
- name: upgrade all packages
  package: name=* state={{common_pkg_state}}
  when: ansible_distribution != "OpenWrt" and ansible_os_family != "Debian"

- name: installing default packages
  package: name={{common_pkgs}} state={{common_pkg_state}}
  when: ansible_distribution != "OpenWrt"

  # this task must be after the package installation because it with fail it
  # the sudo package isn't priorly installed.
- name: ensure there is no requiretty or always_set_home in sudoers
  lineinfile:
    dest: /etc/sudoers
    regexp: "{{item['regexp']}}"
    line: "{{item['line']}}"
    validate: 'visudo -cf %s'
    backrefs: yes
    state: present
  with_items:
    - { regexp: '^Defaults.*requiretty', line: 'Defaults    !requiretty' }
    - { regexp: '^Default.*always_set_home', line: '# Defaults  set_home' }
    - { regexp: '^Defaults.*secure_path = /sbin:/bin:/usr/sbin:/usr/bin', line: 'Defaults   secure_path = /usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin' }

- name: template grub
  copy:
    src: grub
    dest: /etc/default/grub
    owner: root
    group: root
    mode: 0644
  notify: update grub
  when:  ansible_os_family == 'Debian'

### mounts

- name: adding mounts to fstab
  mount:
    src: "{{item.dev}}"
    name: "{{item.path}}"
    fstype: "{{item.fstype}}"
    state: "{{item.state|default('mounted')}}"
    opts: "{{item.opts}}"
    passno: "{{item.passno|default('2')}}"
    dump: "{{item.dump|default('1')}}"
  with_items: "{{mounts|default(omit)}}"
  when: mounts is defined

- name: adjust mountpoints group ownership
  file:
    path: "{{item.path}}"
    group: "{{item.group}}"
    state: directory
  with_items: "{{mounts|default(omit)}}"
  when: mounts is defined
